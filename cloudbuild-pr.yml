steps:
  - id: Generate Google Token
    name: gcr.io/cloud-builders/gcloud
    dir: "applications/${_MODULE}"
    entrypoint: 'bash'
    args:
      - '-c'
      - 'gcloud auth print-access-token > token.key'

  - id: Run SCA
    name: gcr.io/$PROJECT_ID/secops
    entrypoint: bash
    dir: "applications/${_MODULE}"
    args:
      - "-c"
      - |-
        if [ -f sonar-project.properties ]; then
          export WORKSPACE=$(pwd)
          /opt/sq.sh
        fi
    env:
      - "PROJECT_ID=$PROJECT_ID"
      - "CI_PR_NUMBER=${_PR_NUMBER}"
      - "CI_BRANCH=${BRANCH_NAME}"
      - "CI_BASE_BRANCH=${_BASE_BRANCH}"
    secretEnv:
      - "SCA_TOKEN"
    waitFor:
      - "Test and Build"

  - id: Dockerfile Lint
    name: "hadolint/hadolint:latest-alpine"
    dir: "./docker/server/"
    entrypoint: hadolint
    args: ["--failure-threshold", "style", "Dockerfile"]
    waitFor: ["-"]

  - id: Shell Lint
    name: "gcr.io/$PROJECT_ID/shellcheck"
    args: ["**/*.sh"]
    waitFor: ["-"]

  - id: Build Image
    dir: "./"
    name: gcr.io/cloud-builders/docker
    entrypoint: bash
    args:
      - "-c"
      - |
        docker buildx build --secret id=gh_token,env=GH_TOKEN --secret id=token_key,src=./token.key \
        --secret id=aws_access_key_id,env=AWS_ACCESS_KEY_ID --secret id=aws_secret_access_key,env=AWS_SECRET_ACCESS_KEY \
        -f docker/server/Dockerfile \
        -t ${_REGISTRY_URL}/${_PROJECT}/${_MODULE}:${TAG_NAME:-$SHORT_SHA} \
        -t ${_REGISTRY_URL}/${_PROJECT}/${_MODULE}:latest \
        --cache-from ${_REGISTRY_URL}/${_PROJECT}/${_MODULE} \
        --build-arg BUILD_NUMBER=${SHORT_SHA} \
        --build-arg VERSION_NUMBER=${REF_NAME//\//--} \
        --build-arg BUILDKIT_INLINE_CACHE=1 .
    env:
      - "SHORT_SHA=${SHORT_SHA}"
      - "TAG_NAME=${TAG_NAME}"
      - 'REF_NAME=${REF_NAME}'
    secretEnv:
      - "GH_TOKEN"
      - "AWS_ACCESS_KEY_ID"
      - "AWS_SECRET_ACCESS_KEY"
    waitFor:
      - "Generate Google Token"

  - id: Vulnerability Scanning
    dir: './'
    name: 'gcr.io/$PROJECT_ID/trivyhub'
    args:
      - "image"
      - "${_REGISTRY_URL}/${_PROJECT}/${_MODULE}"
      - "trivy-result.txt"
    env:
      - "REPOSITORY=${_GITHUB_USER}/${REPO_NAME}"
      - "COMMIT_ID=${REVISION_ID}"
      - "TRIVY_ARGS=--skip-dirs /opt/poetry/venv --skip-dirs /app/.cache/pre-commit"
      - "TITLE=Trivy Result: ${_REGISTRY_URL}/${_PROJECT}/${_MODULE}:${SHORT_SHA}"
    secretEnv:
      - "GH_TOKEN"

substitutions:
  _REGISTRY_URL: "asia-southeast2-docker.pkg.dev/${PROJECT_ID}/projects"
  _PROJECT: "stack-auth"
  _GITHUB_USER: "GDP-ADMIN"

timeout: 30m
options:
  pool:
    name: 'projects/${PROJECT_ID}/locations/${LOCATION}/workerPools/${_WORKER_POOL_NAME}'
  env:
    - "DOCKER_BUILDKIT=1"
    - "COMPOSE_DOCKER_CLI_BUILD=1"
    - 'SONAR_USER_HOME=.cache'
    - 'XDG_CACHE_HOME=.cache'

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/INFRA_GL_GITHUB_TOKEN/versions/latest
      env: "GH_TOKEN"
    - versionName: projects/$PROJECT_ID/secrets/INFRA_GL_SONARQUBE_TOKEN/versions/latest
      env: "SCA_TOKEN"
    - versionName: "projects/glair-ci/secrets/GLAIR_SHARED_AWS_ACCESS_KEY_ID/versions/latest"
      env: "AWS_ACCESS_KEY_ID"
    - versionName: "projects/glair-ci/secrets/GLAIR_SHARED_AWS_SECRET_ACCESS_KEY/versions/latest"
      env: "AWS_SECRET_ACCESS_KEY"

tags: ["stack-auth", "infra-add-ons", "pull-request"]
