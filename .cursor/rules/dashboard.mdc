---
description: 
globs: 
alwaysApply: false
---
# Stack Auth Dashboard Rules

## Technology Stack
- Next.js 15 with App Router and React 19
- TypeScript with strict type checking
- Tailwind CSS for styling with dark mode support
- Stack Auth for authentication (@stackframe/stack)
- Custom UI components from @stackframe/stack-ui

## Component Patterns

### Form Components
- Use React Hook Form with Yup validation for all forms
- Wrap forms with SmartForm component when possible for auto-generation
- Import form field components from ./form-fields: InputField, TextAreaField, CheckboxField, SwitchField, SelectField, DateField
- Always use FormField, FormItem, FormLabel, FormControl, FormMessage pattern
- Mark required fields with asterisk using FieldLabel component

### UI Components
- Import UI components from @stackframe/stack-ui: Button, Input, Typography, etc.
- Use cn() utility function from @/lib/utils for conditional classes
- Follow shadcn-style component patterns for custom components
- Use Geist fonts (GeistSans, GeistMono) for typography

### Layout & Navigation
- Use nested layouts with layout.tsx files
- Protected routes go in (protected) route groups
- Use Link component from ./components/link for internal navigation
- Navbar should include Logo, UserButton, theme toggle, and feedback dialog
- Add action buttons to PageLayout using actions prop: `<PageLayout actions={<Button>Action</Button>}>`

## File Organization

### App Directory Structure
- Use App Router file conventions (layout.tsx, page.tsx, loading.tsx)
- Group related routes with parentheses: (main), (protected), (outside-dashboard)
- Dynamic routes use [paramName] folder naming
- Co-locate page-specific components near their pages

### Dynamic Routes & Page Structure
- Split dynamic routes into page.tsx (server) and page-client.tsx (client)
- Server page passes params to client: `<PageClient paramName={params.paramName} />`
- Client component handles all state and interactivity
- Use proper TypeScript interfaces for param types

### Component Organization
- Keep reusable components in src/components/
- UI primitives in src/components/ui/
- Form-related components together (form-fields.tsx, smart-form.tsx)
- Feature-specific components can be co-located with pages

## Admin App Integration

### Extending Admin Interface
- Add new methods to packages/stack-shared/src/interface/admin-interface.ts
- Add interface definition to packages/template/src/lib/stack-app/apps/interfaces/admin-app.ts
- Add implementation to packages/template/src/lib/stack-app/apps/implementations/admin-app-impl.ts
- Follow existing patterns for API calls and response handling


## Styling Guidelines
- Use Tailwind CSS classes exclusively
- Support both light and dark themes
- Use CSS custom properties for theme colors (--primary, --background, etc.)
- Responsive design with mobile-first approach
- Use backdrop-blur effects for modern glass morphism

## State Management
- Use React state and Stack Auth context
- Keep server state in server components when possible
- Use Stack Auth hooks: useUser(), useStackApp()
- Handle loading and error states consistently

## TypeScript Patterns
- Use strict TypeScript configuration
- Define proper types for form schemas with Yup
- Use generic type parameters for reusable components: <F extends FieldValues>
- Import types with 'type' keyword: import type { Metadata }

## Authentication Integration
- Configure Stack Auth with stackServerApp instance
- Use UserButton component for user menu
- Handle authenticated vs unauthenticated states
- Use Stack's built-in session management

## Performance Considerations
- Use "use client" directive only when necessary
- Keep server components as default
- Implement proper loading states
- Use Next.js built-in optimizations (fonts, images)

## Error Handling
- Use StackAssertionError for internal errors
- Implement proper error boundaries
- Show user-friendly error messages
- Use Toaster component for notifications
